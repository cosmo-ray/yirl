#!/bin/bash

LINEHELPER[0]="--with-gamemod		add fersal gamemod support"
LINEHELPER[1]="--debug			add -g, maybe more latter"
LINEHELPER[2]="--ndebug			no debug mode, for realease"
LINEHELPER[3]="--hell-march		optimise for native architecturet"
LINEHELPER[4]="--asan			compile with adress sanitazer"
LINEHELPER[5]="--clone-sdl-mixer	like it say"

source configure-helper.sh

for arg in $@; do
    if [ "--with-gamemod" = $arg ]; then
	COMMON_CFLAGS+="-DGAMEMOD"
    fi

    if [ "--debug" = $arg ]; then
	COMMON_CFLAGS+="-g"
    fi
    if [ "--asan" = $arg ]; then
	SANITAZERS=1
    fi
    if [ "--ndebug" = $arg ]; then
 	COMMON_CFLAGS+=" -DNDEBUG -O3"
    fi
    if [ "--hell-march" = $arg ]; then
 	COMMON_CFLAGS+=" -march=native"
    fi

    if [ "--clone-sdl-mixer" = $arg ]; then
	if [ ! -d "./SDL_mixer/" ] ; then
	    hg clone "http://hg.libsdl.org/SDL_mixer/"
	fi
	if [ ! -d "./SDL_mixer/" ] ; then
	    echo "can't clone SDL_mixer with mercurial"
	    exit 1
	fi
    fi
done

add_toolchain mingw-i686
function mingw-i686 {
    export TCC_LIB_NAME="libtcc.a"
    export LIBEXTENSION=dll
    export IS_UNIX=0
    export YIRL_LINKING=build-static-lib
    export BINARY_LINKING="\$(LIBNAME).a"
    var_add BIN_EXT .exe
}

add_toolchain mingw-64
function mingw-64 {
    export TCC_LIB_NAME="libtcc.a"
    export LIBEXTENSION=dll.a
    export IS_UNIX=0
    export YIRL_LINKING=build-static-lib
    export BINARY_LINKING="\$(LIBNAME).a"
    var_add BIN_EXT .exe
}

add_toolchain ubuntu
function ubuntu {
    export LUA_LIB="`pkg-config --libs lua53`"
    export LUA_CFLAGS="`pkg-config --cflags lua53`"
}


add_toolchain centos
function centos {
    export LUA_LIB="`pkg-config --libs lua-5.3`"
    export LUA_CFLAGS="`pkg-config --cflags lua-5.3`"
    export CC=clang
}



parse_args $@


var_add SDL_MIXER_LDFLAGS "$PWD/SDL_mixer/build/.libs/libSDL2_mixer.a"

var_add AR ar
var_add PKG_CONFIG pkg-config
var_add SCRIPT_DIR "core/script"
var_add UTIL_DIR "core/util"
var_add WID_DIR "core/widget"
var_add ENTITY_DIR "core/entity"
var_add GAME_DIR "core/game"
var_add SDL_WID_DIR "$WID_DIR/sdl2"
var_add TESTS_DIR "tests/"
var_add DESCRIPTION_DIR "core/description"
var_add BYTECODE_DIR "core/ybytecode"
var_add GEN_LOADER_DIR "core/generic-loader"
var_add LIBEXTENSION so
var_add LDFLAGS_EXT ""

define_add WITH_SOUND 1
if [ $WITH_SOUND -ne 0 ]; then
    SOUND_DIR="core/sound"
    var_add SOUND_SRC "\"$SOUND_DIR/sdl.c $SOUND_DIR/sound.c\""
    #var_add SOUND_SRC "\"$SOUND_DIR/sound-libvlc.c $SOUND_DIR/sound.c\""
    #var_add VLC_LIB "\"`pkg-config --libs libvlc`\""
    define_add defaultSoundDriver sdlDriver
else
    var_add SOUND_SRC "$SOUND_DIR/sound.c"
    var_add VLC_LIB ""
    define_add defaultSoundDriver noSound
fi

var_add IS_UNIX 1
if [ $IS_UNIX -eq 1 ]; then
    var_append LDFLAGS_EXT "-ldl"
fi

var_add SANITAZERS 0
if [ $SANITAZERS -eq 1 ]; then
    var_add LIBS_SAN "-lasan -lubsan"
    var_add FLAGS_SAN "-fsanitize=leak -fsanitize=undefined"
    export YIRL_LINKING=build-static-lib
    export BINARY_LINKING="\$(LIBNAME).a"

fi

var_add LUA_LIB "\"`pkg-config --libs lua`\""
var_add LUA_CFLAGS "\"`pkg-config --cflags lua`\""

define_add WITH_SDL 1

str_define_add YIRL_MODULES_PATH "modules/"

var_add YIRL_INCLUDE_PATH2 $PWD/include/
var_add YIRL_INCLUDE_PATH $YIRL_INCLUDE_PATH2/yirl/

var_add TCC_LIB_PATH $PWD/tinycc/
var_add TCC_LIB_NAME libtcc.a

var_add YIRL_LINKING build-dynamic-lib
var_add BINARY_LINKING "-lyirl"
